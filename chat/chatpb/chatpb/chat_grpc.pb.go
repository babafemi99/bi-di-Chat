// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package chatpb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// MsgServiceClient is the client API for MsgService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MsgServiceClient interface {
	ChatService(ctx context.Context, opts ...grpc.CallOption) (MsgService_ChatServiceClient, error)
}

type msgServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewMsgServiceClient(cc grpc.ClientConnInterface) MsgServiceClient {
	return &msgServiceClient{cc}
}

func (c *msgServiceClient) ChatService(ctx context.Context, opts ...grpc.CallOption) (MsgService_ChatServiceClient, error) {
	stream, err := c.cc.NewStream(ctx, &MsgService_ServiceDesc.Streams[0], "/chatpb.MsgService/ChatService", opts...)
	if err != nil {
		return nil, err
	}
	x := &msgServiceChatServiceClient{stream}
	return x, nil
}

type MsgService_ChatServiceClient interface {
	Send(*FromClient) error
	Recv() (*FromServer, error)
	grpc.ClientStream
}

type msgServiceChatServiceClient struct {
	grpc.ClientStream
}

func (x *msgServiceChatServiceClient) Send(m *FromClient) error {
	return x.ClientStream.SendMsg(m)
}

func (x *msgServiceChatServiceClient) Recv() (*FromServer, error) {
	m := new(FromServer)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// MsgServiceServer is the server API for MsgService service.
// All implementations must embed UnimplementedMsgServiceServer
// for forward compatibility
type MsgServiceServer interface {
	ChatService(MsgService_ChatServiceServer) error
	mustEmbedUnimplementedMsgServiceServer()
}

// UnimplementedMsgServiceServer must be embedded to have forward compatible implementations.
type UnimplementedMsgServiceServer struct {
}

func (UnimplementedMsgServiceServer) ChatService(MsgService_ChatServiceServer) error {
	return status.Errorf(codes.Unimplemented, "method ChatService not implemented")
}
func (UnimplementedMsgServiceServer) mustEmbedUnimplementedMsgServiceServer() {}

// UnsafeMsgServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MsgServiceServer will
// result in compilation errors.
type UnsafeMsgServiceServer interface {
	mustEmbedUnimplementedMsgServiceServer()
}

func RegisterMsgServiceServer(s grpc.ServiceRegistrar, srv MsgServiceServer) {
	s.RegisterService(&MsgService_ServiceDesc, srv)
}

func _MsgService_ChatService_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(MsgServiceServer).ChatService(&msgServiceChatServiceServer{stream})
}

type MsgService_ChatServiceServer interface {
	Send(*FromServer) error
	Recv() (*FromClient, error)
	grpc.ServerStream
}

type msgServiceChatServiceServer struct {
	grpc.ServerStream
}

func (x *msgServiceChatServiceServer) Send(m *FromServer) error {
	return x.ServerStream.SendMsg(m)
}

func (x *msgServiceChatServiceServer) Recv() (*FromClient, error) {
	m := new(FromClient)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// MsgService_ServiceDesc is the grpc.ServiceDesc for MsgService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MsgService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "chatpb.MsgService",
	HandlerType: (*MsgServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ChatService",
			Handler:       _MsgService_ChatService_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "chatpb/chat.proto",
}
